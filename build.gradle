buildscript {
  repositories {
    maven { url mavenRepo }
    if (!project.hasProperty('compileOnly')) {
      maven { url 'https://plugins.gradle.org/m2/' }
    }
  }
  if (!project.hasProperty('compileOnly')) {
    dependencies {
      classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
      classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
      classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2'
    }
  }
}

plugins {
  id 'com.github.ben-manes.versions' version '0.17.0'
}

allprojects {
  repositories {
    maven { url mavenRepo }
  }
}

import org.gradle.api.logging.StandardOutputListener

apply plugin: 'eclipse'
apply plugin: 'idea'


subprojects {
  apply plugin: 'java'
  apply plugin: 'distribution'

  configurations {
    awaitility
    commonsBeanutils {
      exclude module: 'commons-collections'
    }
    commonsCodec
    commonsCollections
    commonsIo
    commonsLang
    evoInflector
    httpclient
    httpmime
    jacksonCore
    jacksonDatabind
    jacksonDatabindXml
    json
    semVer
    validation
    xmlunit
    yaml

    testCompile.extendsFrom awaitility, junit, mockito, xmlunit
  }

  dependencies {
    awaitility "org.awaitility:awaitility:$awaitilityVersion"
    commonsBeanutils "commons-beanutils:commons-beanutils:$commonsBeanutilsVersion"
    commonsCodec "commons-codec:commons-codec:$commonsCodecVersion"
    commonsCollections "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
    commonsIo "commons-io:commons-io:$commonsIoVersion"
    commonsLang "org.apache.commons:commons-lang3:$commonsLangVersion"
    evoInflector "org.atteo:evo-inflector:$evoInflectorVersion"
    httpclient "org.apache.httpcomponents:httpclient:$httpclientVersion"
    httpmime "org.apache.httpcomponents:httpmime:$httpmimeVersion"
    jacksonCore "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    jacksonDatabind "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    jacksonDatabindXml "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    json "org.json:json:$jsonVersion"
    junit "junit:junit:$junitVersion"
    mockito "org.mockito:mockito-core:$mockitoVersion"
    semVer "com.github.zafarkhaja:java-semver:$semVerVersion"
    validation "javax.validation:validation-api:$validationVersion"
    xmlunit "org.xmlunit:xmlunit-core:$xmlunitVersion"
    yaml "org.yaml:snakeyaml:$snakeYamlVersion"
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all' << '-Xlint:-processing' << '-Xlint:-serial' << '-Werror'
  }
  
  javadoc {
    def events = []
    StandardOutputListener listener = { event -> events << event }
    doFirst {
      logging.addStandardOutputListener(listener)
    }
    doLast {
      logging.removeStandardOutputListener(listener)
      if (events.find { it.toString() =~ /warning/ }) {
        throw new GradleException('Warnings in Javadoc, see output above')
      }
    }
  }

  // Need all test info on command-line for TravisCI
  test {
    testLogging {
      events 'failed'
      showStandardStreams = true
      showStackTraces = true
      exceptionFormat 'full'
    }
    outputs.upToDateWhen { false } // Always run tests so that we have a test report on each build
  }

  if (!project.hasProperty('compileOnly')) {
    apply plugin: 'checkstyle'
    checkstyle {
      configFile = rootProject.file('config/checkstyle.xml')
      toolVersion = '8.10'
      ignoreFailures = false
    }
  
    // Despite ignoreFailures=false, the build won't by default fail on CheckStyle warnings
    // https://issues.gradle.org/browse/GRADLE-2888
    tasks.withType(Checkstyle).each { checkstyleTask ->
      checkstyleTask.doLast {
        reports.all { report ->
          def outputFile = report.destination
          if (outputFile.exists() && outputFile.text.contains('<error ')) {
            throw new GradleException("Found checkstyle issues in $outputFile")
          }
        }
      }
    }

    apply plugin: 'pmd'

    pmd {
      ruleSets = []
      ruleSetFiles = rootProject.files('config/pmd.xml')
      toolVersion = '6.3.0'
      ignoreFailures = false
    }
  
    apply plugin: 'com.github.spotbugs'

    dependencies {
// To be enabled once all found issues have been triaged and fixed or suppressed. 
//      spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1',
//        'com.mebigfatguy.fb-contrib:fb-contrib:7.4.1.sb'
    }
    
    spotbugs {
      reportLevel = 'low'
      toolVersion = '3.1.3'
      ignoreFailures = false
      excludeFilter = rootProject.file('config/spotbugs_filter.xml')
    }
    
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
      reports {
        html {
          enabled = true
        }
        xml {
          withMessages = true
          enabled = !html.enabled
        }
      }
    }
  
    apply from: rootProject.file('jdepend.gradle')
    apply from: rootProject.file('coverage.gradle')
  
    apply plugin: 'eclipse'

    eclipse.classpath {
      defaultOutputDir = file('classes')
      file.whenMerged { classpath ->
        classpath.entries.removeAll { it.kind == 'lib' && it.path.contains("/$buildDir.name/") }
      }
    }
  
    apply plugin: 'idea'
  }
  
  distributions {
    main {
      contents {
        from(jar) {          
          into 'libs'
        }
        from(configurations.runtime) {
          into 'libs'
        }
      }
    }
  }
}

if (!project.hasProperty('compileOnly')) {
  apply plugin: 'codenarc'
  
  codenarc { toolVersion = '1.1' }
  
  task codenarc(type: CodeNarc) {
    mustRunAfter 'clean'
    configFile = file('config/codenarc.groovy')
  
    reports {
      html {
        destination = rootProject.file('build/reports/codenarc.html')
        enabled = true
      }
      xml {
        destination = rootProject.file('build/results/codenarc.xml')
        enabled = true
      }
    }
  
    source = fileTree(rootDir) {
      include '**/*.gradle'
      include '**/*.groovy'
      exclude '**/build/**/*.gradle'
      exclude '**/build/**/*.groovy'
    }
  }
}

project(':infoarchive-configuration') {
  configurations {
    compile.extendsFrom commonsIo, evoInflector, json
  }
}


project(':infoarchive-yaml') {
  configurations {
    compile.extendsFrom commonsIo, commonsLang, evoInflector, yaml
  }
  dependencies {
    compile project(':infoarchive-configuration')
  }
}


project(':infoarchive-sdk-core') {
  configurations {
    compile.extendsFrom commonsBeanutils, commonsCollections, commonsCodec, commonsIo, commonsLang, evoInflector, 
        httpclient, httpmime, jacksonCore, jacksonDatabind, semVer, validation, yaml
  }
  
  dependencies {
    compile project(':infoarchive-yaml')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }

  javadoc {
    def overview = file('src/javadoc/overview.html')
    title = "InfoArchive SIP SDK $version"
    options.overview = overview
    inputs.file overview
  }
}


project(':infoarchive-sdk-stringtemplate') {
  configurations {
    stringtemplate
    compile.extendsFrom stringtemplate
  }

  dependencies {
    stringtemplate "org.antlr:ST4:$stringTemplateVersion"
    compile project(':infoarchive-sdk-core')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }
}


project(':infoarchive-sdk-velocity') {
  configurations {
    velocity
    compile.extendsFrom commonsCollections, velocity
  }

  dependencies {
    velocity "org.apache.velocity:velocity-engine-core:$velocityVersion"
    compile project(':infoarchive-sdk-core')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }
}


defaultTasks 'build'

if (!project.hasProperty('compileOnly')) {
  apply from: rootProject.file('publish.gradle')

  // [sonarToken] is encrypted in .travis.yml, so only available when building in Travis
  if (project.hasProperty('sonarToken')) {
    System.setProperty('sonar.login', sonarToken)
    apply plugin: 'org.sonarqube'
    subprojects.findAll { 
      it.name.startsWith('sample')
    }.each {
      it.sonarqube.skipProject = true
    }
    check.dependsOn 'sonarqube'
  }
  
  check.dependsOn tasks.codenarc
}

