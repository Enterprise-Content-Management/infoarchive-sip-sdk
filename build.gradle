buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4'
  }
}

import org.gradle.api.logging.StandardOutputListener

task wrapper(type: Wrapper) {
  gradleVersion = '4.3.1'
}

apply plugin: 'eclipse'
apply plugin: 'idea'


subprojects {
  apply plugin: 'java'

  repositories {
    mavenCentral()
  }

  configurations {
    awaitility
    commonsBeanutils {
      exclude module: 'commons-collections'
    }
    commonsCodec
    commonsCollections
    commonsIo
    commonsLang
    evoInflector
    httpclient
    httpmime
    jacksonCore
    jacksonDatabind
    json
    semVer
    validation
    xmlunit
    yaml

    testCompile.extendsFrom awaitility, junit, mockito, xmlunit
  }

  dependencies {
    awaitility "org.awaitility:awaitility:$awaitilityVersion"
    commonsBeanutils "commons-beanutils:commons-beanutils:$commonsBeanutilsVersion"
    commonsCodec "commons-codec:commons-codec:$commonsCodecVersion"
    commonsCollections "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
    commonsIo "commons-io:commons-io:$commonsIoVersion"
    commonsLang "org.apache.commons:commons-lang3:$commonsLangVersion"
    evoInflector "org.atteo:evo-inflector:$evoInflectorVersion"
    httpclient "org.apache.httpcomponents:httpclient:$httpclientVersion"
    httpmime "org.apache.httpcomponents:httpmime:$httpmimeVersion"
    jacksonCore "com.fasterxml.jackson.core:jackson-core:$jacksonCoreVersion"
    jacksonDatabind "com.fasterxml.jackson.core:jackson-databind:$jacksonCoreVersion"
    json "org.json:json:$jsonVersion"
    junit "junit:junit:$junitVersion"
    mockito "org.mockito:mockito-core:$mockitoVersion"
    semVer "com.github.zafarkhaja:java-semver:$semVerVersion"
    validation "javax.validation:validation-api:$validationVersion"
    xmlunit "org.xmlunit:xmlunit-core:$xmlunitVersion"
    yaml "org.yaml:snakeyaml:$snakeYamlVersion"
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-serial" << "-Werror"
  }
  
  javadoc {
    def events = []
    StandardOutputListener listener = { event -> events << event }
    doFirst {
      logging.addStandardOutputListener(listener)
    }
    doLast {
      logging.removeStandardOutputListener(listener)
      if (events.find { it.toString() =~ /warning/ }) {
        throw new GradleException("Warnings in Javadoc, see output above");
      }
    }
  }

  // Need all test info on command-line for TravisCI
  test {
    testLogging {
      events "failed"
      showStandardStreams = true
      showStackTraces = true
      exceptionFormat "full"
    }
    outputs.upToDateWhen { false } // Always run tests so that we have a test report on each build
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = rootProject.file('config/checkstyle.xml')
    toolVersion = '8.1'
    ignoreFailures = false
  }

  // Despite ignoreFailures=false, the build won't by default fail on CheckStyle warnings
  // https://issues.gradle.org/browse/GRADLE-2888
  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("Found checkstyle issues in $outputFile")
        }
      }
    }
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = rootProject.files('config/pmd.xml')
    toolVersion = '5.4.1'
    ignoreFailures = false
  }

  apply plugin: 'findbugs'
  findbugs {
    toolVersion = '3.0.1'
    excludeFilter = rootProject.file('config/findbugs_filter.xml')
    ignoreFailures = false
  }

  apply from: rootProject.file('jdepend.gradle')
  apply from: rootProject.file('coverage.gradle')

  apply plugin: 'eclipse'
  eclipse.classpath {
    defaultOutputDir = file('classes')
    file.whenMerged { classpath ->
      classpath.entries.removeAll { it.kind == 'lib' && it.path.contains("/$buildDir.name/") }
    }
  }

  apply plugin: 'idea'
}


project(':infoarchive-configuration') {
  configurations {
    compile.extendsFrom evoInflector, json
  }
}


project(':infoarchive-yaml') {
  configurations {
    compile.extendsFrom commonsIo, evoInflector, yaml
  }
  dependencies {
    compile project(':infoarchive-configuration')
  }
}


project(':infoarchive-sdk-core') {
  configurations {
    compile.extendsFrom commonsBeanutils, commonsCollections, commonsCodec, commonsIo, commonsLang, evoInflector, 
        httpclient, httpmime, jacksonCore, jacksonDatabind, semVer, validation, yaml
  }
  
  dependencies {
    compile project(':infoarchive-yaml')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }

  javadoc {
    def overview = file('src/javadoc/overview.html')
    title = "InfoArchive SIP SDK $version"
    options.overview = overview
    inputs.file overview
  }
}


project(':infoarchive-sdk-stringtemplate') {
  configurations {
    stringtemplate
    compile.extendsFrom stringtemplate
  }

  dependencies {
    stringtemplate "org.antlr:ST4:$stringTemplateVersion"
    compile project(':infoarchive-sdk-core')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }
}


project(':infoarchive-sdk-velocity') {
  configurations {
    velocity
    velocityTools {
      exclude group: 'org.apache.struts'
      exclude module: 'commons-beanutils'
      exclude module: 'commons-chain'
      exclude module: 'commons-digester'
      exclude module: 'commons-logging'
      exclude module: 'commons-validator'
      exclude module: 'dom4j'
      exclude module: 'oro'
      exclude module: 'sslext'
    }
    compile.extendsFrom commonsCollections, velocity, velocityTools
  }

  dependencies {
    velocity "org.apache.velocity:velocity:$velocityVersion"
    velocityTools "org.apache.velocity:velocity-tools:$velocityToolsVersion"
    compile project(':infoarchive-sdk-core')
    testCompile project(':infoarchive-yaml').sourceSets.test.output
  }
}


defaultTasks 'build'

apply from: rootProject.file('publish.gradle')


// [sonarToken] is encrypted in .travis.yml, so only available when building in Travis
if (project.hasProperty('sonarToken')) {
  System.setProperty('sonar.login', sonarToken)
  apply plugin: 'org.sonarqube'
  subprojects.findAll { 
    it.name.startsWith('sample')
  }.each {
    it.sonarqube.skipProject = true
  }
  check.dependsOn 'sonarqube'
}
