ext.publishProjects = subprojects.findAll { it.name.startsWith('infoarchive-') }

configure(publishProjects) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  // OSSRH requires both javadoc and sources jars
  task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
  }
    
  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
  }
    
  assemble.dependsOn sourcesJar, javadocJar
    
  artifacts {
    archives jar, javadocJar, sourcesJar
  }
    
  task installLocally {
    dependsOn jar

    doLast {
        """mvn install:install-file \
  -Dfile=$jar.archivePath \
  -DgroupId=$group \
  -DartifactId=$name \
  -Dversion=$version \
  -Dpackaging=jar""".execute()
    }
  }
  
  // Set nexusUsername/Password in ~/.gradle/gradle.properties or specify on command line using -P
  ext {
    ossrhUsername = project.hasProperty('nexusUsername') ? nexusUsername : ''
    ossrhPassword = project.hasProperty('nexusPassword') ? nexusPassword : ''
  }
  
  publishing {
    repositories {
      maven {
        def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
  
        credentials {
          username = ossrhUsername
          password = ossrhPassword
        }
      }
    }
  
    publications {
      mavenJava(MavenPublication) {
        groupId = project.group
        artifactId = project.name

        pom {
          // OSSRH also requires certain info in the POM
          name = project.name
          description = project.description
          packaging = 'jar'
          url = 'https://github.com/Enterprise-Content-Management/infoarchive-sdk'

          scm {
            connection = 'https://github.com/Enterprise-Content-Management/infoarchive-sdk.git'
            developerConnection = 'https://github.com/Enterprise-Content-Management/infoarchive-sdk.git'
            url = 'https://github.com/Enterprise-Content-Management/infoarchive-sdk.git'
          }
  
          licenses {
            license {
              name = 'Mozilla Public License Version 2.0'
              url = 'https://www.mozilla.org/en-US/MPL/2.0/'
            }
          }

          developers {
            developer {
  //                id = 'ray'
  //                name = 'Remon Sinnema'
  //                email = 'rsinnema@opentext.com'
  //                timezone = 'Europe/Amsterdam'
              organization = 'OpenText'
            }
          }
          
          contributors {
            contributor {
              name = 'Remon Sinnema'
              organization = 'OpenText'
            }
            contributor {
              name = 'Chandramouli Addaguduru'
              organization = 'OpenText'
            }
            contributor {
              name = 'Roman Kochkar'
              organization = 'Saint Petersburg State University'
            }
            contributor {
              name = 'Artem Kovalev'
              organization = 'OpenText'
            }
            contributor {
              name = 'Erik Silkensen'
              organization = 'Flatirons Solutions'
            }
            contributor {
              name = 'Domanic Smith-Jones'
              organization = 'OpenText'
            }
            contributor {
              name = 'Tord Svensson'
              organization = 'Dell Technologies'
            }
          }

          // For some reason the dependencies don't come across, so do it manually
          withXml { 
            def dependenciesNode = asNode().appendNode('dependencies')
            prj.configurations.compile.allDependencies.each {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
            }
          }
        }
      }
    }
  }
  
  // OSSRH also requires everything to be signed
  signing {
    required { gradle.taskGraph.hasTask('publish') }
    sign configurations.archives
    sign publishing.publications.mavenJava
  }
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
  packageGroup = 'com.opentext'
}

task publish {
  dependsOn publishProjects*.tasks*.publish
  finalizedBy closeAndReleaseRepository
}
