apply plugin: 'jacoco'

jacoco {
  toolVersion = '0.8.7'
}

ext.limits = [
  'line' : 50,
  'complexity' : 67
]

jacocoTestReport {
  dependsOn 'test'
  reports {
    xml.required = true
  }
  doLast {
    def report = file("${jacoco.reportsDirectory.asFile.get()}/test/jacocoTestReport.xml")
    def parser = new XmlParser()
    parser.setFeature('http://apache.org/xml/features/nonvalidating/load-external-dtd', false)
    parser.setFeature('http://apache.org/xml/features/disallow-doctype-decl', false)
    def results = parser.parse(report)
    def percentage = {
      def covered = it.'@covered' as Double
      def missed = it.'@missed' as Double
      ((covered / (covered + missed)) * 100).round(2)
    }
    def counters = results.counter
    def metrics = [:]
    metrics << [
      'line' : percentage(counters.find { it.'@type' == 'LINE' }),
      'complexity' : percentage(counters.find { it.'@type' == 'COMPLEXITY' }),
    ]
    def failures = []
    metrics.each {
      def limitProperty = "limits.$it.key"
      def limit = project.hasProperty(limitProperty) ? Double.valueOf(project.property(limitProperty)) : limits[it.key]
      if (it.value < limit) {
        failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
      }
    }
    if (failures) {
      logger.error('------------------ Code Coverage Failed -----------------------')
      failures.each {
        logger.error(it)
      }
      logger.error('---------------------------------------------------------------')
      throw new GradleException('Code coverage failed')
    } else {
      logger.debug('Passed Code Coverage Checks')
    }
  }
}

check.dependsOn jacocoTestReport
