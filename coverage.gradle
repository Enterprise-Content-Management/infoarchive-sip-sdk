apply plugin: 'jacoco'

jacoco {
  toolVersion = '0.7.6.201602180812'
}

ext.limits = [
  'line' : 80,
  'complexity' : 67
]

jacocoTestReport {
  dependsOn 'test'
  reports {
    xml.enabled true
  }
  doLast {
    def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
    def parser = new XmlParser()
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    def results = parser.parse(report)
    def percentage = {
      def covered = it.'@covered' as Double
      def missed = it.'@missed' as Double
      ((covered / (covered + missed)) * 100).round(2)
    }
    def counters = results.counter
    def metrics = [:]
    metrics << [
      'line' : percentage(counters.find { it.'@type'.equals('LINE') }),
      'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
    ]
    def failures = []
    metrics.each {
      def limit = limits[it.key]
      if (it.value < limit) {
        failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
      }
    }
    if (failures) {
      logger.error("------------------ Code Coverage Failed -----------------------")
      failures.each {
        logger.error(it)
      }
      logger.error("---------------------------------------------------------------")
      throw new GradleException("Code coverage failed")
    } else{
      logger.debug("Passed Code Coverage Checks")
    }
  }
}

check.dependsOn jacocoTestReport
